#include <stdio.h>
#include <stdlib.h>
#include<string.h>

typedef struct{
	int isStart;
	int isAccept;
	int *oneOutcomes;
	int *zeroOutcomes;
}states;

int *makeIntArray(int length){
	int *p = NULL;
	if( length > 0 ){
		p = (int *) malloc(length*sizeof(int));
	}
	return p;
}
void deleteIntArray(int *p){
	if( p != NULL ){
		free(p);
	}
}
int **makeIntMatrix(int width, int height){
	int **p = (int **) NULL;
	int *pData = (int *) NULL;
	if( (width > 0) && (height > 0) ){
		p = (int **) malloc(width*sizeof(int*));
		pData = (int *) malloc(width*height*sizeof(int));
		int i = 0;
		while( i < width ){
			p[i] = pData+(i*height);
			i = i+1;
		}
	}
	return p;
}
void deleteIntMatrix(int **p){
	if( p != NULL ){
		if( p[0] != NULL ){
			free(p[0]);
		}
	free(p);
	}
}

int main(int argc, char* argv[]){
        int *arr = makeIntArray(1000000);
        char strs[1000000][10000];
        int counter = 0;
	int currState = 0;
	int beegCounter = 0;
        states *statearr = malloc(1001*sizeof(states));
        statearr[1].isStart = 1;
        statearr[7].isAccept = 1;
        statearr[1].zeroOutcomes = malloc(1*sizeof(int));
        statearr[1].zeroOutcomes = realloc(statearr[1].zeroOutcomes, 2 * sizeof(int));
        statearr[1].zeroOutcomes[0] = 1;
        statearr[1].zeroOutcomes[1] = 2;
        statearr[1].oneOutcomes = malloc(sizeof(int));
        statearr[1].oneOutcomes[0] = 1;
        statearr[2].zeroOutcomes = malloc(3*sizeof(int));
        statearr[2].zeroOutcomes[0] = 1;
        statearr[2].zeroOutcomes[1] = 2;
        statearr[2].zeroOutcomes[2] = 7;
        statearr[2].oneOutcomes = malloc(sizeof(int));
        statearr[2].oneOutcomes[0] = 1;
        statearr[7].zeroOutcomes = malloc(sizeof(int));
        statearr[7].zeroOutcomes[0] = 7;
        statearr[7].oneOutcomes = malloc(sizeof(int));
        statearr[7].oneOutcomes[0] = 7;
        for(int i = 0; i < 1001; i++){
                if(statearr[i].isStart == 1){
                        arr[0] = i;
			//currState = i;
                        //printf("%d\n", i);
                        break;
                }
        }
        strcpy(strs[0], "000");
        do{
		currState = arr[beegCounter];
		char* temp;
		strcpy(temp, strs[counter]++);
                if(strs[counter][0] == '0'){
                        for(int i = 0; i < (sizeof(statearr[currState].zeroOutcomes)/sizeof(statearr[currState].zeroOutcomes[0])); i++){
				counter++;
				arr[counter] = statearr[currState].zeroOutcomes[i];
				strcpy(strs[counter], temp);
			}
                }
		else{
			 for(int i = 0; i < (sizeof(statearr[currState].oneOutcomes)/sizeof(statearr[currState].oneOutcomes[0])); i++){
                                counter++;
                                arr[counter] = statearr[currState].zeroOutcomes[i];
                                strcpy(strs[counter], temp);
                        }
		}
        } while(strs[0] != '\0');
	for
}
